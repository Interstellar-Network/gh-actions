name: "prepare-rust"
description: "Additional preparations for Rust"

inputs:
  working-directory:
    description: "working-directory is only supported for 'run' action NOT 'uses' so we need to DIY"
    required: false
    default: "${{ github.workspace }}"
  use_toolchain_toml:
    description: "Ignore toolchain_* inputs and parse rust-toolchain.toml instead"
    required: false
    default: "false"
  # Typically rust-toolchain.toml is used from our SGX projects, and those are
  # usually in enclave/ directory, or some other subdir.
  toolchain_toml_path:
    description: "PATH to rust-toolchain.toml; only applicable when 'use_toolchain_toml'"
    required: false
    default: "rust-toolchain.toml"
  toolchain_channel:
    description: "rust toolchain channel"
    required: false
    default: "stable"
  # https://github.com/dtolnay/rust-toolchain ONLY install "minimal"
  # But most of our workflows require fmt+clippy
  # DO NOT set a "default" here b/c we MSUT NOT install components on "nightly"
  # and for some reason GH actions CAN NOT override using an empty string("")
  # https://github.com/actions/runner/issues/924
  # eg: if the caller sets: 'toolchain_components: ""' -> here we have toolchain_components == default == eg "fmt,clippy"
  toolchain_components:
    description: "rust toolchain components"
    required: true
  install_sccache:
    description: "Install sccache"
    required: false
    default: "true"
  # passed to https://github.com/Swatinem/rust-cache#example-usage
  # NOTE cf https://github.com/Swatinem/rust-cache/blob/master/src/config.ts#L49
  # It's an either/or situation: "This uses either the `shared-key` input, or the `key` input combined with the `job` key."
  # So for our use cache setting eg "rust-cache-key": REPLACEME_ANDROID_TARGET(from matrix strategy) SHOULD be enough.
  #
  # "A cache key that is used instead of the automatic `job`-based key,
  # and is stable over multiple jobs."
  # default: empty
  rust-cache-shared-key:
    description: "Swatinem/rust-cache shared-key"
    required: false
    default: ""
  # "An additional cache key that is added alongside the automatic `job`-based
  # cache key and can be used to further differentiate jobs."
  # default: empty
  rust-cache-key:
    description: "Swatinem/rust-cache key"
    required: false
    default: ""
  # "A whitespace separated list of env-var *prefixes* who's value contributes
  # to the environment cache key.
  # The env-vars are matched by *prefix*, so the default `RUST` var will
  # match all of `RUSTC`, `RUSTUP_*`, `RUSTFLAGS`, `RUSTDOC_*`, etc."
  # default: "CARGO CC CFLAGS CXX CMAKE RUST"
  rust-cache-env-var:
    description: "Swatinem/rust-cache env-var"
    required: false
    default: ""

################################################################################
# ABOUT CACHE(sccache)
# Swatinem cache DOES NOT update the cache(never!)
# And its logic make it depends on basically just Cargo.toml and Cargo.lock
#
# ## ONE
# This is fine, but it means that when dev pipelines we may end up uploading
# a cache which is useless, and if that is the cache it MUST be cleared manually.
# eg scenario:
# - first run in a branch: a bad "working-directory" is given by the caller
# - the cache will be keyed by Cargo.lock/.toml, and uploaded at the end of the job
#   but it will be empty
# - the caller changes to the correct CWD
# - in Post Run Post job cleanup. for "Cache Configuration" it will say: "Cache up-to-date."
# -> the cache will only be useless for this branch until expiration or manual cleanup
#
# ## TWO
# The same issue also happens when compiling for multiple targets!
# Swatinem default env vars: "default: "CARGO CC CFLAGS CXX CMAKE RUST""
# But that means the FIRST --target built will be the cache; and all the other ones
# will NOT use a valid Sccache's cache...
# eg if we have a matrix with multiple android targets(x86,arm7,aarch64)
# without doing anything we get:
# - x86 android first run:
# Restore Key:
#     v0-rust-android-c53327f2d2aa8742f3a7c28f87abfcc73c99c9ba
# Cache Key:
#     v0-rust-android-c53327f2d2aa8742f3a7c28f87abfcc73c99c9ba-bf1d6e6287bf9b638129294d35244d6e6ef45d26
# - aarch64 first run:
# Restore Key:
#     v0-rust-android-c53327f2d2aa8742f3a7c28f87abfcc73c99c9ba
# Cache Key:
#     v0-rust-android-c53327f2d2aa8742f3a7c28f87abfcc73c99c9ba-bf1d6e6287bf9b638129294d35244d6e6ef45d26
# Which will obviously not get us a working cache.
#
# ## SOLUTION
# - IDEALLY: all the job should set(export) the proper CC_*** etc for their target
#   but we CAN NOT do it from inside eg Gradle scripts so for ease of use this is not good.
# - CURRENT: we add inputs "rust-cache-shared-key" and "rust-cache-key" and pass the
#   responsability to the caller.

runs:
  using: "composite"
  steps:
    ############################################################################
    # NOTE:
    # - actions-rs/toolchain is not maintained anymore
    # - we COULD use https://github.com/dtolnay/rust-toolchain but:
    #   - it DOES NOT(and WILL NOT) support rust-toolchain.toml
    #   - it is installing(if needed) "rustup" but that is already installed on Github Runners
    # --> we use a manually modified version of its action.yml copy-pasted next to this file
    #

    # Parse rust-toolchain.toml if inputs.use_toolchain_toml OR use inputs.toolchain_channel directly
    #
    # https://github.com/dtolnay/rust-toolchain/issues/12
    # https://github.com/dtolnay/rust-toolchain/issues/29
    # https://github.com/ralexstokes/ethereum-consensus/blob/main/.github/workflows/ci.yml#L16-L26
    # NOTE: we CAN
    - name: "Rust channel: read rust-toolchain.toml"
      id: rust-toolchain
      run: |
        if [[ "${use_toolchain_toml}" == "true" ]]; then RUST_TOOLCHAIN=$(grep 'channel' ${{ inputs.toolchain_toml_path }} | awk '{split($0,a," = "); print a[2]}' | tr -d '"'); else RUST_TOOLCHAIN=${{ inputs.toolchain_channel }}; fi
        echo "RUST_TOOLCHAIN=$RUST_TOOLCHAIN" >> $GITHUB_OUTPUT
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        use_toolchain_toml: ${{ fromJSON(inputs.use_toolchain_toml) }}

    # cf https://github.com/dtolnay/rust-toolchain/blob/master/action.yml for what inputs are possible
    #
    # Swatinem/rust-cache: "selecting a toolchain either by action or manual `rustup` calls should happen
    # before the plugin, as it uses the current rustc version as its cache key"
    - name: Install toolchain
      uses: dtolnay/rust-toolchain@master
      id: dtolnay-rust-toolchain
      with:
        toolchain: ${{ steps.rust-toolchain.outputs.RUST_TOOLCHAIN }}
        components: ${{ inputs.toolchain_components }}

    # https://github.com/actions-rs/toolchain#outputs
    # Technically we could just use outputs.rustc b/c guaranteed to change for every new compiler/build
    # but it is better to have human readable cache key to diagnose if something goes wrong
    # So just strip whitespaces from "outputs.rustc" instead(which contains the hash)
    - name: Set Rust compilerid
      id: set-rust-compilerid
      run: |
        echo "rust-compilerid=${{ steps.dtolnay-rust-toolchain.outputs.cachekey }}" >> $GITHUB_OUTPUT
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    ############################################################################
    # cf prepare/action.yml for why not use hendrikmuhs/ccache-action
    # MUST check if sscache already exists b/c prepare_rust CAN be called multiple time on the same host
    # error: "mkdir: cannot create directory ‘/tmp/sscache’: File exists"
    #
    # NOTE: about cache: previously we used cache action(or rather pat-s/always-upload-cache@v3)
    # to handle ~/.cache/sccache but now that "Swatinem/rust-cache@v2" has the option
    # to take care of additional directories, we delegate.

    - name: Check if sccache already in PATH
      if: fromJSON(inputs.install_sccache)
      id: check-sccache-exists
      run: |
        echo "sccache-exists=$(command -v sccache &> /dev/null && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Install sccache custom prebuilt binary
      if: fromJSON(inputs.install_sccache) && !fromJSON(steps.check-sccache-exists.outputs.sccache-exists)
      run: |
        mkdir /tmp/sscache
        cd /tmp/sscache
        wget -c https://github.com/mozilla/sccache/releases/download/v$SSCACHE_VERSION/sccache-v$SSCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz -O - | tar -xz --strip-components 1
        chmod +x sccache
        sudo mv sccache /usr/local/bin/sccache
        sccache --version
        echo "SCCACHE_DIR=${{ env.SCCACHE_DIR }}" >> $GITHUB_ENV
      env:
        SSCACHE_VERSION: 0.3.3
        # That is the default: but we might as well be explicit
        # NOTE: we write it to GITHUB_ENV in "run", then use it in "Swatinem/rust-cache" below
        # WARNING: MUST use the full path for "cache-directories"! [DO NOT use "~/..."] because that is NOT expanded??
        SCCACHE_DIR: /home/runner/.cache/sccache
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    # NOTE sccache does not work with CARGO_INCREMENTAL=1; and in CI we SHOULD disable it anyway
    - name: Setup env for sccache for Cargo/Rustc
      if: fromJSON(inputs.install_sccache)
      run: |
        echo "RUSTC_WRAPPER=/usr/local/bin/sccache" >> $GITHUB_ENV
        echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    # IMPORTANT: DO NOT call this multiple time on the same host! cf "name: sccache"
    # TODO this or stock actions/cache?
    # see https://github.com/Swatinem/rust-cache/blob/cb2cf0cc7c5198d3364b9630e2c3d457f160790c/src/common.ts#L108 for key
    #
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        # "Determines whether workspace `target` directories are cached."
        # "If `false`, only the cargo registry will be cached."
        # "default: "true""
        cache-targets: "${{ inputs.working-directory }}/target/"
        # TODO only "if: fromJSON(inputs.install_sccache)"?
        cache-directories: "${{ env.SCCACHE_DIR }}"
        shared-key: "${{ inputs.rust-cache-shared-key }}"
        key: "${{ inputs.rust-cache-key }}"
        env-vars: "${{ inputs.rust-cache-env-var }}"

    # MUST be after actions/cache@v3 else the stats are already empty
    - name: Reset sccache stats
      if: fromJSON(inputs.install_sccache)
      run: |
        sccache --zero-stats
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    ############################################################################
    # NOTE: https://github.com/actions-rs/cargo is not maintained anymore
    # https://github.com/actions-rs/cargo/issues/222
    # https://github.com/actions-rs/cargo/issues/216
    # etc
    #
    # But that way just a simple call to "cargo" anyway so we do it directly
    # (with the copy-pasted matcher)

    # https://github.com/actions-rs/cargo/blob/master/.matchers/rust.json
    - name: Setup cargo matcher
      run: echo "::add-matcher::${{ github.action_path }}/rust.json"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
