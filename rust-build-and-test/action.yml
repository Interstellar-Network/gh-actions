name: "rust-build-and-test"
description: "cargo check + cargo test"

inputs:
  working-directory:
    description: "working-directory is only supported for 'run' action NOT 'uses' so we need to DIY"
    required: false
    default: "${{ github.workspace }}"
  test_args:
    description: "args passed to cargo test"
    required: false
    default: ""
  test_timeout_seconds:
    description: "timeout for: cargo test [run only, no compilation]"
    required: false
    # 60s * 5 = 5 minutes
    default: "300"

runs:
  using: "composite"
  steps:
    # Split compilation and test run
    # Allows to set a reasonably short timeout for tests; but without timing out the whole CI if the compilation takes
    # a while(ie cache not working b/c too old, new Rust version, etc)
    - name: cargo test compile [ie --no-run]
      run: cargo test --no-run ${{ inputs.test_args }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - name: cargo test run
      run: timeout ${{ inputs.test_timeout_seconds }} sh -c "cargo test ${{ inputs.test_args }}"
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    # TODO move into separate action? ideally into a JS action "post" that setup ccache?
    - name: Print ccache/sccache stats
      # display stats even if tests failed
      if: always()
      run: |
        ccache --show-stats || echo "ccache not found!"
        sccache --show-stats || echo "ccache sccache found!"
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    # TODO cargo install; cargo fmt; cargo clippy?
    # do we call "cargo build --profile={{ matrix.build }}" manually or not needed?
